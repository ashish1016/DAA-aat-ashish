def unboundedKnapsack(k, arr):
    # dp[i] will store the maximum sum we can get with capacity i
    dp = [0] * (k + 1)

    # Iterate through all capacities from 1 to k
    for i in range(1, k + 1):
        for num in arr:
            if num <= i:
                dp[i] = max(dp[i], dp[i - num] + num)

    return dp[k]

if __name__ == "__main__":
    import sys
    input = sys.stdin.read
    data = input().split()
    
    t = int(data[0])
    index = 1
    results = []
    
    for _ in range(t):
        n = int(data[index])
        k = int(data[index + 1])
        arr = list(map(int, data[index + 2:index + 2 + n]))
        index += 2 + n
        results.append(unboundedKnapsack(k, arr))
    
    for result in results:
        print(result)
